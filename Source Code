#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAX_ACCOUNTS = 100;

int* accountNumbers = new int[MAX_ACCOUNTS];
char** names = new char* [MAX_ACCOUNTS];
int* pins = new int[MAX_ACCOUNTS];
double* balances = new double[MAX_ACCOUNTS];
char** cnics = new char* [MAX_ACCOUNTS];

int totalAccounts = 0;

// Manual string copy 
void manualStringCopy(char* dest, const char* src) {
    int i = 0;
    while (src[i] != '\0') {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
}

// Convert int to string (for filenames)
void intToStr(int num, char* str) {
    int i = 0;
    if (num == 0) {
        str[i++] = '0';
        str[i] = '\0';
        return;
    }

    char temp[20];
    int j = 0;
    while (num > 0) {
        temp[j++] = (num % 10) + '0';
        num /= 10;
    }
    // Reverse
    for (int k = j - 1; k >= 0; k--) {
        str[i++] = temp[k];
    }
    str[i] = '\0';
}

// Get current date-time string, safe for MSVC and others
const char* getTimestamp() {
    static char buffer[80];
    time_t now = time(0);
    tm localTime;

#ifdef _MSC_VER
    localtime_s(&localTime, &now);  // safer on MSVC
#else
    tm* temp = localtime(&now);
    if (temp == nullptr) {
        buffer[0] = '\0';
        return buffer;
    }
    localTime = *temp;
#endif

    strftime(buffer, 80, "%Y-%m-%d %H:%M:%S", &localTime);
    return buffer;
}

// Log transaction to file "transactions_<accNo>.txt"
void logTransaction(int accNo, const char* type, double amount, double balance) {
    char filename[50] = "transactions_";
    char numStr[20];
    intToStr(accNo, numStr);

    int i = 12; // length of "transactions_"
    int j = 0;
    while (numStr[j] != '\0') {
        filename[i++] = numStr[j++];
    }
    const char* suffix = ".txt";
    j = 0;
    while (suffix[j] != '\0') {
        filename[i++] = suffix[j++];
    }
    filename[i] = '\0';

    ofstream fout(filename, ios::app);
    fout << "[" << getTimestamp() << "] "
        << type << " of " << amount
        << " | Balance: " << balance << "\n";
    fout.close();
}

void loadAccounts() {
    ifstream fin("accounts.txt");
    if (!fin) return;

    while (fin >> accountNumbers[totalAccounts]) {
        fin.ignore();
        names[totalAccounts] = new char[100];
        fin.getline(names[totalAccounts], 100);
        fin >> pins[totalAccounts];
        fin >> balances[totalAccounts];
        fin.ignore();
        cnics[totalAccounts] = new char[20];
        fin.getline(cnics[totalAccounts], 20);
        totalAccounts++;
        if (totalAccounts >= MAX_ACCOUNTS) break;
    }
    fin.close();
}

void saveAccounts() {
    ofstream fout("accounts.txt");
    for (int i = 0; i < totalAccounts; ++i) {
        fout << accountNumbers[i] << "\n"
            << names[i] << "\n"
            << pins[i] << "\n"
            << balances[i] << "\n"
            << cnics[i] << "\n";
    }
    fout.close();
}

int findAccountIndex(int accNo) {
    for (int i = 0; i < totalAccounts; ++i)
        if (accountNumbers[i] == accNo)
            return i;
    return -1;
}

bool verifyPin(int index) {
    int inputPin;
    cout << "Enter 4-digit PIN: ";
    cin >> inputPin;
    if (pins[index] == inputPin) return true;
    cout << "Incorrect PIN.\n";
    return false;
}

void createAccount() {
    if (totalAccounts >= MAX_ACCOUNTS) {
        cout << "Account limit reached.\n";
        return;
    }

    int accNo, pin;
    double deposit;
    char tempName[100];
    char tempCNIC[20];

    cout << "Enter account number: ";
    cin >> accNo;
    if (findAccountIndex(accNo) != -1) {
        cout << "Account already exists.\n";
        return;
    }

    cout << "Enter account holder name: ";
    cin.ignore();
    cin.getline(tempName, 100);

    cout << "Set 4-digit PIN: ";
    cin >> pin;
    if (pin < 1000 || pin > 9999) {
        cout << "Invalid PIN. Must be 4 digits.\n";
        return;
    }

    cout << "Enter CNIC (xxxxx-xxxxxxx-x): ";
    cin.ignore();
    cin.getline(tempCNIC, 20);
    if (strlen(tempCNIC) != 15 || tempCNIC[5] != '-' || tempCNIC[13] != '-') {
        cout << "Invalid CNIC format.\n";
        return;
    }

    cout << "Enter initial deposit: ";
    cin >> deposit;

    accountNumbers[totalAccounts] = accNo;

    names[totalAccounts] = new char[strlen(tempName) + 1];
    manualStringCopy(names[totalAccounts], tempName);

    pins[totalAccounts] = pin;
    balances[totalAccounts] = deposit;

    cnics[totalAccounts] = new char[strlen(tempCNIC) + 1];
    manualStringCopy(cnics[totalAccounts], tempCNIC);

    logTransaction(accNo, "Account Created with Deposit", deposit, deposit);

    totalAccounts++;
    cout << "Account created successfully.\n";
    saveAccounts();
}

void deposit() {
    int accNo;
    cout << "Enter account number: ";
    cin >> accNo;
    int index = findAccountIndex(accNo);
    if (index == -1) {
        cout << "Account not found.\n";
        return;
    }
    if (!verifyPin(index)) return;

    double amount;
    cout << "Enter deposit amount: ";
    cin >> amount;

    balances[index] += amount;
    logTransaction(accountNumbers[index], "Deposit", amount, balances[index]);

    cout << "Deposit successful. New balance: " << balances[index] << "\n";
    saveAccounts();
}

void withdraw() {
    int accNo;
    cout << "Enter account number: ";
    cin >> accNo;
    int index = findAccountIndex(accNo);
    if (index == -1) {
        cout << "Account not found.\n";
        return;
    }
    if (!verifyPin(index)) return;

    double amount;
    cout << "Enter withdrawal amount: ";
    cin >> amount;

    if (amount > balances[index]) {
        cout << "Insufficient funds.\n";
        return;
    }

    balances[index] -= amount;
    logTransaction(accountNumbers[index], "Withdrawal", amount, balances[index]);

    cout << "Withdrawal successful. New balance: " << balances[index] << "\n";
    saveAccounts();
}

void checkBalance() {
    int accNo;
    cout << "Enter account number: ";
    cin >> accNo;
    int index = findAccountIndex(accNo);
    if (index == -1) {
        cout << "Account not found.\n";
        return;
    }
    if (!verifyPin(index)) return;

    cout << "Account Holder: " << names[index] << "\n";
    cout << "CNIC: " << cnics[index] << "\n";
    cout << "Balance: " << balances[index] << "\n";
}

void showHistory() {
    int accNo;
    cout << "Enter account number: ";
    cin >> accNo;
    int index = findAccountIndex(accNo);
    if (index == -1) {
        cout << "Account not found.\n";
        return;
    }
    if (!verifyPin(index)) return;

    char filename[50] = "transactions_";
    char numStr[20];
    intToStr(accNo, numStr);

    int i = 12; // length of "transactions_"
    int j = 0;
    while (numStr[j] != '\0') {
        filename[i++] = numStr[j++];
    }
    const char* suffix = ".txt";
    j = 0;
    while (suffix[j] != '\0') {
        filename[i++] = suffix[j++];
    }
    filename[i] = '\0';

    ifstream fin(filename);
    if (!fin) {
        cout << "No transaction history found.\n";
        return;
    }

    cout << "\nTransaction History for Account #" << accNo << ":\n";
    cout << "---------------------------------------------\n";
    char line[200];
    while (fin.getline(line, 200)) {
        cout << line << "\n";
    }
    fin.close();
}

//  Send Money between accounts
void sendMoney() {
    int senderAcc, receiverAcc;
    cout << "Enter your account number (sender): ";
    cin >> senderAcc;
    int senderIndex = findAccountIndex(senderAcc);
    if (senderIndex == -1) {
        cout << "Sender account not found.\n";
        return;
    }
    if (!verifyPin(senderIndex)) return;

    cout << "Enter receiver account number: ";
    cin >> receiverAcc;
    int receiverIndex = findAccountIndex(receiverAcc);
    if (receiverIndex == -1) {
        cout << "Receiver account not found.\n";
        return;
    }

    double amount;
    cout << "Enter amount to send: ";
    cin >> amount;

    if (amount <= 0) {
        cout << "Invalid amount.\n";
        return;
    }
    if (amount > balances[senderIndex]) {
        cout << "Insufficient funds.\n";
        return;
    }

    balances[senderIndex] -= amount;
    balances[receiverIndex] += amount;

    logTransaction(senderAcc, "Sent Money", amount, balances[senderIndex]);
    logTransaction(receiverAcc, "Received Money", amount, balances[receiverIndex]);

    cout << "Transfer successful.\n";
    cout << "Your new balance: " << balances[senderIndex] << "\n";

    saveAccounts();
}

void menu() {
    int choice;
    do {
        cout << "\n==== Wwelcome to Bank-Al-Bahria ====\n";
        cout << "1. Create Account\n";
        cout << "2. Deposit\n";
        cout << "3. Withdraw\n";
        cout << "4. Check Balance\n";
        cout << "5. View Transaction History\n";
        cout << "6. Send Money\n";
        cout << "7. Exit\n";
        cout << "Select an option: ";
        cin >> choice;

        switch (choice) {
        case 1: createAccount(); break;
        case 2: deposit(); break;
        case 3: withdraw(); break;
        case 4: checkBalance(); break;
        case 5: showHistory(); break;
        case 6: sendMoney(); break;
        case 7: cout << "Exiting program.\n"; break;
        default: cout << "Invalid choice.\n"; break;
        }
    } while (choice != 7);
}

int main() {
    loadAccounts();
    menu();

    for (int i = 0; i < totalAccounts; ++i) {
        delete[] names[i];
        delete[] cnics[i];
    }
    delete[] names;
    delete[] cnics;
    delete[] accountNumbers;
    delete[] pins;
    delete[] balances;

    return 0;
}
